# The name of the workflow — appears in GitHub's Actions tab
name: Build & Deploy ASP.NET MVC (.NET 9)

# Triggers the workflow on every push to the 'main' branch
on:
  push:
    branches: [ main ]  # You can change this if your default branch has a different name

jobs:
  build-and-deploy:  # Job name — you can name it anything you like

    # Tells GitHub to use your self-hosted runner (Sumit-DEV)    
    runs-on: [self-hosted, sumit-dev]

    steps:
    # Step 1: Checkout your source code from the GitHub repository
    - name: Checkout code
      uses: actions/checkout@v4  # GitHub Action to pull your code into the runner

    # Step 2: Install .NET 9 SDK on your runner
    - name: Setup .NET 9
      uses: actions/setup-dotnet@v4  # This action installs the specified .NET SDK
      with:
        dotnet-version: '9.0.x'  # Installs the latest patch version of .NET 9

    # Step 3: Restore NuGet packages (dependencies)
    - name: Restore dependencies
      run: dotnet restore  # Equivalent to running in terminal: dotnet restore

    # Step 4: Build the application (in Release mode)
    - name: Build project
      run: dotnet build --no-restore --configuration Release  # --no-restore skips restore (already done)

    # Step 5: Publish the app (creates the web-ready output)
    - name: Publish project
      run: dotnet publish -c Release -o ./publish  # Output files go into ./publish directory
    # Step 6: STop IIS POOL — copy published files to the IIS folder
    - name: Stop IIS App Pool
      shell: powershell
      run: |
        Import-Module WebAdministration
        Stop-WebAppPool -Name "GithubLocalHost"
    
    # Step 7: Deploy to IIS — copy published files to the IIS folder
    - name: Deploy to IIS folder
      shell: powershell  # Use Windows PowerShell (comes with Windows)
      run: |
        # Set the path to your IIS website folder
        $iisPath = "C:\inetpub\GithubLocalHost"
        
        # If the folder exists, clear it before copying new files
        if (Test-Path $iisPath) {
          Remove-Item "$iisPath\*" -Recurse -Force
        }
        else {
          # If it doesn't exist, create it
          New-Item -Path $iisPath -ItemType Directory
        }

        # Copy the published output to the IIS site folder
        Copy-Item -Path "./publish/*" -Destination $iisPath -Recurse -Force
    # Step 7: Deploy to IIS — copy published files to the IIS folder
    - name: Start IIS App Pool
      shell: powershell
      run: |
        Import-Module WebAdministration
        Start-WebAppPool -Name "GithubLocalHost"
        
